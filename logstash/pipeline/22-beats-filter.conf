filter{
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:logdate} %{USERNAME:level} - %{USERNAME:class}::%{GREEDYDATA:comment}"}
  }
  grok {
    match => { 
      "[log][file][path]" => "\/%{GREEDYDATA}\/%{GREEDYDATA}\/%{GREEDYDATA:filename}\.log"
    }
  }

  ruby {
    init => " @agg = [0,1,2,3]
              @i=4
            "
    code => "
      begin
        fieldArray = event.get('message').scan(/[A-Za-z_]+=[^\s]+/)
        for field in fieldArray
            result = field.split('=')
            if result[1] =~ /^[0-9\.]+$/
                event.set(result[0], result[1].to_f)
            else
                event.set(result[0], result[1])
            end

            if result[0] == 'MEASURE_START'
              index = -1;
              case result[1]
                when 'VST'
                index =0;
                when 'CREATE_TIMELINE'
                index =1;
                when 'PLAY_STREAMER'
                index =2;
                when 'LOAD_TIMELINE_PROMISES'
                index =3
              end
              @i+=1;
              @agg[index] = @i;
              event.set('AGG', @agg[index])
            end

            if result[0] == 'MEASURE_END'
              index = -1;
              case result[1]
                when 'VST'
                index =0;
                when 'CREATE_TIMELINE'
                index =1;
                when 'PLAY_STREAMER'
                index =2;
                when 'LOAD_TIMELINE_PROMISES'
                index =3
              end
              @i+=1;
              event.set('AGG', @agg[index])
              @agg[index] = @i;
            end
        end
      rescue Exception => e
          event['ruby_exception'] = e.message
      end
    "
  }
  
  if [MEASURE_START] {
    aggregate {
      task_id => "%{AGG}"
      code => "map['start_date'] = event.get('logdate')"
      map_action => "create"
    }
  } else if [MEASURE_END]  {
    aggregate {
      task_id => "%{AGG}"
      code => "event.set('start_date', map['start_date'])"
      map_action => "update"
      end_of_task =>  true
      timeout => 120
    }
  }

  mutate {
    remove_field => ["host"] 
  }

  date {
    match => [ "logdate", "YYYY-MM-dd HH:mm:ss,SSS"]
    target => "logdate"
  }

  date {
    match => [ "start_date", "YYYY-MM-dd HH:mm:ss,SSS"]
    target => "start_date"
  }

  if [MEASURE_END] {
    ruby {
    code => "
      startDate = event.get('start_date') != nil ? event.get('start_date') : 0
      endDate = event.get('logdate') != nil ? event.get('logdate') : 0
      elapsedTime = ( endDate - startDate ) * 1000
      event.set('elapsed_time',elapsedTime)
    "
    }
  }

}
